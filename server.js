/**
 * eSelect | ÿ•Ÿä ÿ≥ŸäŸÑŸÉÿ™
 * Shopify AI Translator & Copywriter v7.0 (Content-Focused Edition)
 * ÿ•ÿπÿØÿßÿØ: ÿ≥ÿßŸÑŸÖ ÿßŸÑÿ≥ŸÑŸäŸÖŸä | https://eselect.store
 * ÿ™ÿ∑ŸàŸäÿ± Ÿàÿ™ÿ≠ÿ≥ŸäŸÜ: Gemini AI
 */

import express from "express";
import axios from "axios";
import bodyParser from "body-parser";
import fs from "fs";
import dotenv from "dotenv";

dotenv.config();
const app = express();
app.use(bodyParser.json({ limit: '10mb' }));

// =============== CONFIG & ENVIRONMENT VARIABLES ===============
const {
  OPENAI_API_KEY,
  SHOPIFY_ACCESS_TOKEN,
  SHOPIFY_STORE_URL,
  PORT = 3000,
} = process.env;
const PROCESSED_TAG = "ai-processed";

// =============== LOGGER UTILITY ===============
const log = (step, msg, icon = "‚úÖ") => {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${icon} [${step}] :: ${msg}`;
  fs.appendFileSync("./logs/actions.log", logMessage + "\n");
  console.log(logMessage);
};

// =============== AI & TRANSLATION HELPERS ===============
async function makeOpenAIRequest(prompt, max_tokens = 1024) {
  try {
    const response = await axios.post("https://api.openai.com/v1/chat/completions", {
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.65,
      max_tokens,
    }, { headers: { Authorization: `Bearer ${OPENAI_API_KEY}` } });
    return response.data.choices[0].message.content.trim();
  } catch (err) {
    const errorMessage = err.response ? JSON.stringify(err.response.data) : err.message;
    log("AI_ERROR", `‚ùå OpenAI API call failed: ${errorMessage}`, "‚ùå");
    throw new Error("Failed to communicate with OpenAI");
  }
}

async function createContent(enTitle, enDescription, type = "title") {
  if (!enTitle) return "";
  let prompt;

  if (type === "title") {
    prompt = `You are a title specialist. Rewrite the following English product title into a concise, impactful, and SEO-friendly Arabic title. It MUST be short, clear, and focus only on the main product identity. **Maximum 60 characters.**\n\nEnglish Title: "${enTitle}"`;
  } else { // 'description' type
    prompt = `You are an expert Arab e-commerce copywriter and SEO specialist. Your goal is to write a compelling, clean, and professional product description in Arabic.
    
    **Inputs:**
    - English Title: "${enTitle}"
    - English Description: "${enDescription}"

   üéØ ŸÖŸáŸÖÿ™ŸÉ:
ÿ£ŸÜÿ™ ÿÆÿ®Ÿäÿ± ŸÅŸä ŸÉÿ™ÿßÿ®ÿ© ŸàÿµŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÅŸä ÿßŸÑÿ™ÿ¨ÿßÿ±ÿ© ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿ© ŸàŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿ™ÿ≠ÿ≥ŸäŸÜ ŸÖÿ≠ÿ±ŸÉÿßÿ™ ÿßŸÑÿ®ÿ≠ÿ´ (SEO) ŸÑŸÖÿ™ÿ¨ÿ± eSelect | ÿ•Ÿä ÿ≥ŸäŸÑŸÉÿ™.
ŸÖŸáŸÖÿ™ŸÉ ŸáŸä ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÜÿµŸàÿµ ŸàÿßŸÑŸÖŸàÿßÿµŸÅÿßÿ™ ÿßŸÑŸÖÿπÿ∑ÿßÿ©ÿå ÿ´ŸÖ ÿµŸäÿßÿ∫ÿ© **ŸàÿµŸÅ ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä ÿ¥ÿßŸÖŸÑ ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ©** ŸäŸÉŸàŸÜ ÿ¨ÿ∞ÿßÿ®Ÿãÿßÿå ÿ™ÿ≥ŸàŸäŸÇŸäŸãÿßÿå ŸÖŸÜÿ≥ŸÇŸãÿßÿå ŸàŸÖŸÜÿßÿ≥ÿ®Ÿãÿß ŸÑŸÑÿπÿ±ÿ∂ ŸÅŸä Shopify.

üß† ÿßŸÑÿ™ÿπŸÑŸäŸÖÿßÿ™ ÿßŸÑÿØŸÇŸäŸÇÿ©:
1. ŸÑÿß ÿ™ÿ™ÿ±ÿ¨ŸÖ ÿ≠ÿ±ŸÅŸäŸãÿß ‚Äî ÿ®ŸÑ ÿ£ÿπÿØ ŸÉÿ™ÿßÿ®ÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿ®ÿßŸÑŸÉÿßŸÖŸÑ ÿ®ÿ£ÿ≥ŸÑŸàÿ® ÿ™ÿ≥ŸàŸäŸÇŸä ÿπÿ±ÿ®Ÿä ŸÇŸàŸä.
2. ÿ±ŸÉŸëÿ≤ ÿπŸÑŸâ ÿ•ÿ®ÿ±ÿßÿ≤ ÿßŸÑŸÅÿßÿ¶ÿØÿ© ŸÑŸÑÿπŸÖŸäŸÑ ŸÖÿπ ŸàÿµŸÅ ŸàÿßŸÇÿπŸä Ÿàÿ¨ÿ∞ÿßÿ® ŸÑŸÑŸÖŸÜÿ™ÿ¨.
3. ÿßÿ≠ÿ∞ŸÅ ÿ£Ÿä ÿπÿ®ÿßÿ±ÿßÿ™ ÿ™ÿ±ŸàŸäÿ¨Ÿäÿ© ÿπÿßŸÖÿ© ÿ£Ÿà ÿ™ÿ≠Ÿäÿßÿ™ ÿ£Ÿà ÿ∞ŸÉÿ± ŸÑŸÑŸÖÿ™ÿ¨ÿ± ÿ£Ÿà ÿÆÿØŸÖÿ© ÿßŸÑÿπŸÖŸÑÿßÿ° ÿ£Ÿà ÿßŸÑÿ¥ÿ≠ŸÜ.
4. ÿßÿ≥ÿ™ÿÆÿØŸÖ ŸÑÿ∫ÿ© ŸÅÿµÿ≠Ÿâ ÿπÿµÿ±Ÿäÿ© ŸÖŸÇŸÜÿπÿ© ŸàŸàÿßÿ∂ÿ≠ÿ©.
5. ÿßÿ¨ÿπŸÑ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ŸÖŸÜÿ≥ŸÇÿ© Ÿàÿ¨ÿßŸáÿ≤ÿ© ŸÑŸÑŸÜÿ≥ÿÆ ÿ•ŸÑŸâ Shopify ŸÖÿ®ÿßÿ¥ÿ±ÿ© ÿØŸàŸÜ ÿ™ÿπÿØŸäŸÑ.

üì¶ **ŸáŸäŸÉŸÑ ÿßŸÑŸÜÿµ ÿßŸÑŸÖÿ∑ŸÑŸàÿ® ÿ®ÿßŸÑÿ∂ÿ®ÿ∑:**

**ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÜÿ™ÿ¨:**  
[ÿßŸÉÿ™ÿ® ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿ®ÿ¥ŸÉŸÑ ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä Ÿàÿ¨ÿ∞ÿßÿ®]

**ŸàÿµŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨:**  
ÿßÿ®ÿØÿ£ ÿ®ŸÅŸÇÿ±ÿ© ŸÇÿµŸäÿ±ÿ© ŸàŸÖŸÇŸÜÿπÿ© (ÿ≥ÿ∑ÿ±ŸäŸÜ ÿ•ŸÑŸâ ÿ´ŸÑÿßÿ´ÿ©) ÿ™Ÿàÿ∂Ÿëÿ≠ ŸÅÿßÿ¶ÿØÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸàŸÑŸÖÿßÿ∞ÿß ŸáŸà ŸÖŸÖŸäÿ≤.  
ÿ´ŸÖ ÿ£ÿ∂ŸÅ ŸÇÿ≥ŸÖŸäŸÜ ŸÖŸÜÿ∏ŸÖŸäŸÜ:

‚ú® **ÿ£ŸáŸÖ ÿßŸÑŸÖŸÖŸäÿ≤ÿßÿ™:**  
- [ÿßÿ∞ŸÉÿ± ÿ£ÿ®ÿ±ÿ≤ ÿßŸÑŸÖŸÖŸäÿ≤ÿßÿ™ ÿ®ÿ¥ŸÉŸÑ ŸÜŸÇÿßÿ∑ Ÿàÿßÿ∂ÿ≠ÿ© ŸàŸÖŸÇŸÜÿπÿ©ÿå ÿ™ÿ®ÿØÿ£ ŸÉŸÑ ŸÜŸÇÿ∑ÿ© ÿ®ÿßŸÑŸÅÿπŸÑ ÿ£Ÿà ÿ®ŸàÿµŸÅ ŸÖÿ®ÿßÿ¥ÿ± ŸÑŸÑŸÅÿßÿ¶ÿØÿ©]  

üìã **ÿßŸÑŸÖŸàÿßÿµŸÅÿßÿ™ ÿßŸÑÿ™ŸÇŸÜŸäÿ©:**  
- [ÿßÿ∞ŸÉÿ± ÿßŸÑŸÖŸàÿßÿµŸÅÿßÿ™ ÿßŸÑŸÅŸÜŸäÿ© ÿ£Ÿà ÿßŸÑŸÇŸäÿßÿ≥ÿßÿ™ ÿ£Ÿà ÿßŸÑŸÖŸàÿßÿØ ÿ£Ÿà ÿßŸÑÿ£ÿØÿßÿ° ÿ£Ÿà ÿßŸÑÿ≥ÿπÿ© ÿ≠ÿ≥ÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨]  

ÿßÿÆÿ™ŸÖ ÿ®ÿ¨ŸÖŸÑÿ© ÿ™ÿ≥ŸàŸäŸÇŸäÿ© ÿÆŸÅŸäŸÅÿ© ÿ™ÿ¥ÿ¨ÿπ ÿßŸÑÿπŸÖŸäŸÑ ÿπŸÑŸâ ÿßŸÇÿ™ŸÜÿßÿ° ÿßŸÑŸÖŸÜÿ™ÿ¨.

**ÿπŸÜŸàÿßŸÜ SEO:**  
[ÿπÿ®ÿßÿ±ÿ© ŸÇÿµŸäÿ±ÿ© ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä ŸÑŸÑŸÖŸÜÿ™ÿ¨ Ÿàÿ£ŸáŸÖ ŸÖŸäÿ≤ÿ©]

**ŸàÿµŸÅ SEO:**  
[ÿπÿ®ÿßÿ±ÿ© ŸàÿµŸÅŸäÿ© ŸÇÿµŸäÿ±ÿ© (150‚Äì160 ÿ≠ÿ±ŸÅŸãÿß) ÿ™ÿ¥ÿ¨ÿπ ÿπŸÑŸâ ÿßŸÑŸÜŸÇÿ± Ÿàÿ™ÿ≠ÿ™ŸàŸä ŸÉŸÑŸÖÿßÿ™ ŸÖŸÅÿ™ÿßÿ≠Ÿäÿ© ÿ±ÿ¶Ÿäÿ≥Ÿäÿ©]

**ÿßŸÑŸàÿ≥ŸàŸÖ:**  
[ÿ∂ÿπ ŸÉŸÑŸÖÿßÿ™ ŸÖŸÅÿ™ÿßÿ≠Ÿäÿ© ÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ŸÖŸÅÿµŸàŸÑÿ© ÿ®ŸÅŸàÿßÿµŸÑ ÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿäÿ© , ŸÖÿ´ŸÑ: ŸÖŸÜÿ™ÿ¨, ÿßŸÉÿ≥ÿ≥Ÿàÿßÿ±, ŸáÿØŸäÿ©, ŸÜÿ≥ÿßÿ¶Ÿä, eSelect]

**ÿßŸÑŸÅÿßÿ±ŸäŸÜÿ™:**  
[ÿ£ÿ∂ŸÅ ÿÆŸäÿßÿ±ÿßÿ™ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ•ŸÜ Ÿàÿ¨ÿØÿ™ ŸÖÿ´ŸÑ ÿßŸÑŸÑŸàŸÜÿå ÿßŸÑŸÖŸÇÿßÿ≥ÿå ÿßŸÑÿ¥ŸÉŸÑ. ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™Ÿàÿ¨ÿØÿå ÿßŸÉÿ™ÿ® "ŸÑÿß ŸäŸàÿ¨ÿØ ÿÆŸäÿßÿ±ÿßÿ™ ÿ•ÿ∂ÿßŸÅŸäÿ©"]

**ÿ±ÿßÿ®ÿ∑ URL:**  
[ÿßŸÉÿ™ÿ® ÿ±ÿßÿ®ÿ∑ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ®ÿßŸÑÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿäÿ© ŸÅŸÇÿ∑ Ÿàÿ®ÿ¥ŸÉŸÑ ŸÖÿ®ÿ≥ÿ∑ ŸàŸÖŸÜÿßÿ≥ÿ® ŸÑŸÖÿ≠ÿ±ŸÉÿßÿ™ ÿßŸÑÿ®ÿ≠ÿ´ ŸÖÿ´ŸÑ: smart-watch-ultra-2]

üß© **ŸÜÿµÿßÿ¶ÿ≠ ÿØÿßÿÆŸÑŸäÿ©:**
- ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ±ŸÖŸàÿ≤ ÿßŸÑÿ™ÿπÿ®Ÿäÿ±Ÿäÿ© ÿßŸÑŸÖŸÜÿßÿ≥ÿ®ÿ© (üíé, üåø, üí°, üîã, üß¥, üß†) ŸÑÿ•ÿ∂ÿßŸÅÿ© ÿ¨ÿßÿ∞ÿ®Ÿäÿ© ÿ®ÿµÿ±Ÿäÿ©.  
- ŸÑÿß ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ÿπŸÑÿßŸÖÿßÿ™ ÿ™ÿπÿ¨ÿ® ŸÉÿ´Ÿäÿ±ÿ©.  
- ÿßÿ¨ÿπŸÑ ÿßŸÑÿ£ÿ≥ŸÑŸàÿ® ÿßÿ≠ÿ™ÿ±ÿßŸÅŸäŸãÿß Ÿàÿ≥ŸÑÿ≥Ÿãÿß ŸäŸÜÿßÿ≥ÿ® ÿßŸÑŸáŸàŸäÿ© ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿ© ŸÑŸÖÿ™ÿ¨ÿ± eSelect | ÿ•Ÿä ÿ≥ŸäŸÑŸÉÿ™.

‚úÖ ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ© ÿßŸÑŸÜŸáÿßÿ¶Ÿäÿ© Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉŸàŸÜ ŸÖŸÜÿ≥ŸÇÿ© ÿ®ŸÜŸÅÿ≥ ÿßŸÑÿ¥ŸÉŸÑ ÿßŸÑÿ™ÿßŸÑŸä (ŸÜŸÖŸàÿ∞ÿ¨):
------------------------------------------------------------
**ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÜÿ™ÿ¨:**  
[ŸÜÿµ]

**ŸàÿµŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨:**  
[ŸÜÿµ]

**ÿ£ŸáŸÖ ÿßŸÑŸÖŸÖŸäÿ≤ÿßÿ™:**  
- [ŸÜŸÇÿ∑ÿ©]  
- [ŸÜŸÇÿ∑ÿ©]  
- [ŸÜŸÇÿ∑ÿ©]  

**ÿßŸÑŸÖŸàÿßÿµŸÅÿßÿ™ ÿßŸÑÿ™ŸÇŸÜŸäÿ©:**  
- [ŸÖŸàÿßÿµŸÅÿ©]  
- [ŸÖŸàÿßÿµŸÅÿ©]  

**ÿπŸÜŸàÿßŸÜ SEO:**  
[ŸÜÿµ]

**ŸàÿµŸÅ SEO:**  
[ŸÜÿµ]

**ÿßŸÑŸàÿ≥ŸàŸÖ:**  
[tag1, tag2, tag3]

**ÿßŸÑŸÅÿßÿ±ŸäŸÜÿ™:**  
[ŸÜÿµ]

**ÿ±ÿßÿ®ÿ∑ URL:**  
[url-handle]
------------------------------------------------------------

`;
  }
  
  const result = await makeOpenAIRequest(prompt);
  return result.replace(/"/g, ''); // Clean up quotes
}

// **NEW & IMPROVED**: Robust function to translate options and their values reliably
async function translateProductOptions(product) {
    if (!product.options || product.options.length === 0 || !product.variants) {
        return { variants: product.variants, options: product.options };
    }

    const translationMap = new Map();

    // 1. Translate Option Names (e.g., Color, Size)
    const optionNames = product.options.map(opt => opt.name);
    const namesPrompt = `Translate only the following option names, separated by '||':\n${optionNames.join(' || ')}`;
    const translatedNamesStr = await makeOpenAIRequest(namesPrompt, 150);
    const translatedNames = translatedNamesStr.split('||').map(n => n.trim());
    
    // 2. Translate Option Values for each option separately
    for (let i = 0; i < optionNames.length; i++) {
        const optionName = optionNames[i];
        // Get unique values for this specific option (e.g., for "Color", get "Red", "Blue")
        const uniqueValues = [...new Set(product.variants.map(v => v[`option${i + 1}`]).filter(Boolean))];
        
        if (uniqueValues.length > 0) {
            const valuesPrompt = `Translate only the following values for "${optionName}", separated by '||':\n${uniqueValues.join(' || ')}`;
            const translatedValuesStr = await makeOpenAIRequest(valuesPrompt, 400);
            const translatedValues = translatedValuesStr.split('||').map(v => v.trim());
            
            uniqueValues.forEach((val, index) => {
                if (translatedValues[index]) {
                    translationMap.set(val, translatedValues[index]);
                }
            });
        }
    }

    // 3. Rebuild product options and variants with translated values
    const newOptions = product.options.map((opt, i) => ({
        ...opt,
        name: translatedNames[i] || opt.name,
    }));

    const newVariants = product.variants.map(variant => ({
        ...variant,
        option1: translationMap.get(variant.option1) || variant.option1,
        option2: translationMap.get(variant.option2) || variant.option2,
        option3: translationMap.get(variant.option3) || variant.option3,
    }));

    return { variants: newVariants, options: newOptions };
}


// =============== DATA PROCESSING HELPERS ===============
function generateHandle(englishTitle) {
  return englishTitle.toLowerCase().replace(/[^\w\s-]/g, "").trim().replace(/\s+/g, "-").slice(0, 70);
}

function generateSEO(title, description) {
  const cleanDescription = description.replace(/<[^>]+>/g, " ").replace(/\s\s+/g, ' ').trim();
  return { seoTitle: title.slice(0, 70), seoDescription: cleanDescription.slice(0, 160) };
}

// =============== SHOPIFY API HELPER ===============
async function updateShopifyProduct(productId, payload) {
  const url = `${SHOPIFY_STORE_URL}/admin/api/2024-07/products/${productId}.json`;
  try {
    await axios.put(url, { product: payload }, { headers: { "X-Shopify-Access-Token": SHOPIFY_ACCESS_TOKEN } });
    log("SHOPIFY_UPDATE", `Product ${productId} updated successfully.`);
  } catch (err) {
    const errorMessage = err.response ? JSON.stringify(err.response.data) : err.message;
    log("SHOPIFY_ERROR", `‚ùå API call to update product failed: ${errorMessage}`, "‚ùå");
    throw new Error(`Shopify API call failed`);
  }
}

// =============== MAIN PRODUCT PROCESSING LOGIC ===============
async function processProduct(product) {
  const { id, title: enTitle, body_html: enDescription, tags } = product;

  if (tags && tags.includes(PROCESSED_TAG)) {
    log("LOOP_PREVENTION", `üîµ Skipping already processed product ${id}.`, "üîµ");
    return;
  }
  
  log("START_PROCESSING", `üöÄ Starting content generation for: "${enTitle}"`);

  const [newTitle, newDescription, { variants, options }] = await Promise.all([
      createContent(enTitle, null, "title"),
      createContent(enTitle, enDescription, "description"),
      translateProductOptions(product)
  ]);
  log("CONTENT_GENERATION", "Title, description, and variant values created/translated.");

  const newHandle = generateHandle(enTitle);
  const { seoTitle, seoDescription } = generateSEO(newTitle, newDescription);
  
  const deliveryDays = 21;
  // **REMOVED**: Collection and Type from tags
  const updatedTags = `${tags ? tags + ',' : ''}${PROCESSED_TAG}`;
  
  const payload = {
    id,
    title: newTitle,
    body_html: newDescription,
    handle: newHandle,
    tags: updatedTags,
    variants,
    options,
    metafields_global_title_tag: seoTitle,
    metafields_global_description_tag: seoDescription,
    metafields: [{
      key: "delivery_days",
      namespace: "custom",
      value: String(deliveryDays),
      type: "single_line_text_field"
    }]
  };
  
  await updateShopifyProduct(id, payload);

  log("FINISH", `üéØ Product "${newTitle}" (ID: ${id}) processed successfully!`);
}

// =============== API ROUTES (WEBHOOKS) ===============
app.post("/webhook/:type", async (req, res) => {
  log("WEBHOOK_RECEIVED", `Webhook received for product ${req.params.type}.`, "üöÄ");
  res.status(200).send("Webhook received.");
  try {
    await processProduct(req.body);
  } catch (error) {
    log("PROCESSING_ERROR", `‚ùå Error in webhook flow: ${error.message}`, "‚ùå");
  }
});

app.get("/", (_, res) => res.send(`üöÄ eSelect AI Translator & Copywriter v7.0 is running!`));

app.listen(PORT, () => log("SERVER_START", `Server running on port ${PORT}`, "üöÄ"));
