/**
 * eSelect | ÿ•Ÿä ÿ≥ŸäŸÑŸÉÿ™
 * Shopify AI Translator & Copywriter v7.0 (Content-Focused Edition)
 * ÿ•ÿπÿØÿßÿØ: ÿ≥ÿßŸÑŸÖ ÿßŸÑÿ≥ŸÑŸäŸÖŸä | https://eselect.store
 * ÿ™ÿ∑ŸàŸäÿ± Ÿàÿ™ÿ≠ÿ≥ŸäŸÜ: Gemini AI
 */

import express from "express";
import axios from "axios";
import bodyParser from "body-parser";
import fs from "fs";
import dotenv from "dotenv";

dotenv.config();
const app = express();
app.use(bodyParser.json({ limit: '10mb' }));

// =============== CONFIG & ENVIRONMENT VARIABLES ===============
const {
  OPENAI_API_KEY,
  SHOPIFY_ACCESS_TOKEN,
  SHOPIFY_STORE_URL,
  PORT = 3000,
} = process.env;
const PROCESSED_TAG = "ai-processed";

// =============== LOGGER UTILITY ===============
const log = (step, msg, icon = "‚úÖ") => {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${icon} [${step}] :: ${msg}`;
  fs.appendFileSync("./logs/actions.log", logMessage + "\n");
  console.log(logMessage);
};

// =============== AI & TRANSLATION HELPERS ===============
async function makeOpenAIRequest(prompt, max_tokens = 1024) {
  try {
    const response = await axios.post("https://api.openai.com/v1/chat/completions", {
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.65,
      max_tokens,
    }, { headers: { Authorization: `Bearer ${OPENAI_API_KEY}` } });
    return response.data.choices[0].message.content.trim();
  } catch (err) {
    const errorMessage = err.response ? JSON.stringify(err.response.data) : err.message;
    log("AI_ERROR", `‚ùå OpenAI API call failed: ${errorMessage}`, "‚ùå");
    throw new Error("Failed to communicate with OpenAI");
  }
}

async function createContent(enTitle, enDescription, type = "title") {
  if (!enTitle) return "";
  let prompt;

  if (type === "title") {
    prompt = `You are a title specialist. Rewrite the following English product title into a concise, impactful, and SEO-friendly Arabic title. It MUST be short, clear, and focus only on the main product identity. **Maximum 60 characters.**\n\nEnglish Title: "${enTitle}"`;
  } else { // 'description' type
    prompt = `You are an expert Arab e-commerce copywriter and SEO specialist. Your goal is to write a compelling, clean, and professional product description in Arabic.
    
    **Inputs:**
    - English Title: "${enTitle}"
    - English Description: "${enDescription}"

   üéØ ŸÖŸáŸÖÿ™ŸÉ:
ÿ£ŸÜÿ™ ŸÉÿßÿ™ÿ® ŸÖÿ≠ÿ™ŸàŸâ ÿ™ÿ≥ŸàŸäŸÇŸä ŸÖÿ≠ÿ™ÿ±ŸÅ ŸàŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿßŸÑÿ™ÿ¨ÿßÿ±ÿ© ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿ© ŸÑŸÖÿ™ÿ¨ÿ± eSelect | ÿ•Ÿä ÿ≥ŸäŸÑŸÉÿ™.  
ÿ≥ÿ™ŸÇŸàŸÖ ÿ®ÿ•ŸÜÿ¥ÿßÿ° ŸàÿµŸÅ ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä ŸàŸÖŸèŸÜÿ∏ŸÖ ŸÑÿ£Ÿä ŸÖŸÜÿ™ÿ¨ ŸäŸèŸÇÿØŸëŸÖ ÿ•ŸÑŸäŸÉÿå ÿ®ÿµŸäÿßÿ∫ÿ© ÿπÿ±ÿ®Ÿäÿ© ŸÅÿµÿ≠Ÿâ ÿ£ŸÜŸäŸÇÿ©ÿå ÿ¨ÿ∞ÿßÿ®ÿ©ÿå ŸàŸÖŸÜÿßÿ≥ÿ®ÿ© ŸÑÿ∑ÿ®Ÿäÿπÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨.

üß† ÿßŸÑŸÇŸàÿßÿπÿØ ÿßŸÑÿ∞ŸÉŸäÿ©:
1. ŸÑÿß ÿ™ÿ™ÿ±ÿ¨ŸÖ ÿßŸÑŸÜÿµŸàÿµ ÿ≠ÿ±ŸÅŸäŸãÿß ‚Äî ÿ®ŸÑ ÿ£ÿπÿØ ŸÉÿ™ÿßÿ®ÿ™Ÿáÿß ÿ®ÿ£ÿ≥ŸÑŸàÿ® ÿπÿ±ÿ®Ÿä ÿ™ÿ≥ŸàŸäŸÇŸä Ÿäÿ®ÿ±ÿ≤ **ÿßŸÑŸÅÿßÿ¶ÿØÿ© ŸàÿßŸÑŸÇŸäŸÖÿ©** ŸÑŸÑÿπŸÖŸäŸÑ.  
2. ÿ∫ŸäŸëÿ± ŸÜÿ∫ŸÖÿ© ÿßŸÑŸÉÿ™ÿßÿ®ÿ© Ÿàÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿπÿ±ÿ∂ ÿ®ŸÖÿß Ÿäÿ™ŸÜÿßÿ≥ÿ® ŸÖÿπ **ŸÜŸàÿπ ÿßŸÑŸÖŸÜÿ™ÿ¨** (ŸÅÿÆŸÖ ‚Äì ÿπŸÖŸÑŸä ‚Äì ŸÑŸÑÿ£ÿ∑ŸÅÿßŸÑ ‚Äì ÿ™ÿ¨ŸÖŸäŸÑŸä ‚Äì ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ‚Äì ŸÖŸÜÿ≤ŸÑŸä ‚Äì ÿπÿ∑ÿ±Ÿä...).  
3. ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ£ÿ≥ŸÑŸàÿ® ÿ¨ÿ∞Ÿëÿßÿ® ÿ±ÿßŸÇŸçÿå ÿÆÿßŸÑŸç ŸÖŸÜ ÿßŸÑÿ™ŸÉÿ±ÿßÿ±ÿå ŸàŸÖÿ®ŸÜŸä ÿπŸÑŸâ ÿßŸÑŸàÿ∂Ÿàÿ≠ ŸàÿßŸÑÿ•ŸÇŸÜÿßÿπ.  
4. ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ±ŸÖŸàÿ≤ ÿßŸÑÿ™ÿπÿ®Ÿäÿ±Ÿäÿ© ÿ®ÿßÿπÿ™ÿØÿßŸÑ (üíé, üåø, ‚ú®, üß¥, üí°, üß†, üéÅ, üîã, üß∏, ü™Ñ) ÿ≠ÿ≥ÿ® ÿßŸÑŸÅÿ¶ÿ©.  
5. ŸÑÿß ÿ™ÿ∂ŸÅ ÿπÿ®ÿßÿ±ÿßÿ™ ŸÖÿ´ŸÑ ‚ÄúŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉŸÖ‚Äù ÿ£Ÿà ‚ÄúŸÜÿ≠ŸÜ ŸÖÿ™ÿ¨ÿ±‚Ä¶‚Äù ÿ£Ÿà ÿ£Ÿä ÿ¨ŸÖŸÑ ÿπŸÜ ÿßŸÑÿ¥ÿ≠ŸÜ ÿ£Ÿà ÿßŸÑÿØÿπŸÖ.  
6. ÿ±ŸÉŸëÿ≤ ŸÅŸÇÿ∑ ÿπŸÑŸâ: **ÿßŸÑŸÅÿßÿ¶ÿØÿ© ‚Äì ÿßŸÑÿ¨ŸàÿØÿ© ‚Äì ÿßŸÑÿ™ÿ¨ÿ±ÿ®ÿ© ‚Äì ÿßŸÑÿ™ŸÖŸäÿ≤ ‚Äì ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ‚Äì ÿßŸÑŸÅÿ¶ÿ© ÿßŸÑŸÖŸÜÿßÿ≥ÿ®ÿ©.**

---

üì¶ **ŸáŸäŸÉŸÑ ÿßŸÑŸÜÿµ ÿßŸÑŸÜŸáÿßÿ¶Ÿä ÿßŸÑŸÖÿ∑ŸÑŸàÿ® (ŸÑŸÉŸÑ ŸÖŸÜÿ™ÿ¨):**

ü©µ **[ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ®ÿµŸäÿ∫ÿ© ÿ™ÿ≥ŸàŸäŸÇŸäÿ© ÿ¨ÿ∞ÿßÿ®ÿ©] ‚Äì ÿ¨ŸÖŸÑÿ© ÿ™ÿπÿ±ŸäŸÅŸäÿ© ŸÇÿµŸäÿ±ÿ© ÿ™ŸÑÿÆÿµ ÿßŸÑÿ™ŸÖŸäÿ≤**

ÿßÿ®ÿØÿ£ ÿ®ŸÅŸÇÿ±ÿ© ÿßŸÅÿ™ÿ™ÿßÿ≠Ÿäÿ© ŸÇÿµŸäÿ±ÿ© (ÿ≥ÿ∑ÿ±ŸäŸÜ ÿ•ŸÑŸâ ÿ´ŸÑÿßÿ´ÿ©) ÿ™ÿµŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ®ÿ£ÿ≥ŸÑŸàÿ® Ÿäÿ´Ÿäÿ± ÿßŸÑÿßŸáÿ™ŸÖÿßŸÖ ŸàŸäŸèÿ®ÿ±ÿ≤ ŸÅÿßÿ¶ÿØÿ™Ÿá ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©.  

---

üíé **ÿßŸÑŸÖŸÖŸäÿ≤ÿßÿ™:**
‚ú® [ŸÖŸäÿ≤ÿ© 1]  
‚ú® [ŸÖŸäÿ≤ÿ© 2]  
‚ú® [ŸÖŸäÿ≤ÿ© 3]  
‚ú® [ŸÖŸäÿ≤ÿ© 4]  
‚ú® [ŸÖŸäÿ≤ÿ© 5]  
(ŸäŸÖŸÉŸÜ ÿ£ŸÜ ÿ™ŸÉŸàŸÜ 3 ÿ•ŸÑŸâ 7 ŸÜŸÇÿßÿ∑ ÿ®ÿ≠ÿ≥ÿ® ŸÜŸàÿπ ÿßŸÑŸÖŸÜÿ™ÿ¨)  

---

üìê **ÿßŸÑŸÖŸàÿßÿµŸÅÿßÿ™:**
ÿßŸÑŸÖÿßÿØÿ© / ÿßŸÑŸÖŸÉŸàŸÜÿßÿ™: [ÿßŸÑŸÖÿßÿØÿ© ÿ£Ÿà ÿßŸÑÿ™ŸÉŸàŸäŸÜ]  
ÿßŸÑŸÑŸàŸÜ / ÿßŸÑŸÜŸÖÿ∑: [ÿ≠ÿ≥ÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨]  
ÿßŸÑŸàÿ≤ŸÜ / ÿßŸÑÿ≥ÿπÿ© / ÿßŸÑŸÖŸÇÿßÿ≥: [ÿπŸÜÿØ ÿßŸÑÿ≠ÿßÿ¨ÿ©]  
ÿßŸÑÿ™ŸÇŸÜŸäÿ© ÿ£Ÿà ÿßŸÑŸÖÿπÿßŸÑÿ¨ÿ©: [ÿ•ŸÜ Ÿàÿ¨ÿØÿ™]  
ÿßŸÑŸÅÿ¶ÿ© ÿßŸÑŸÖÿ≥ÿ™ŸáÿØŸÅÿ©: [ÿ±ÿ¨ÿßŸÑ / ŸÜÿ≥ÿßÿ° / ÿ£ÿ∑ŸÅÿßŸÑ / ÿπÿßŸÖ]  
ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ / ŸÜŸàÿπ ÿßŸÑŸÖŸÜÿ™ÿ¨ / ÿßŸÑŸàÿ∏ŸäŸÅÿ© ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©: [ÿ≠ÿ≥ÿ® ÿ∑ÿ®Ÿäÿπÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨]  

---

üéÅ **ŸÖÿ≠ÿ™ŸàŸäÿßÿ™ ÿßŸÑÿπÿ®Ÿàÿ©:**
[ÿßŸÉÿ™ÿ® ÿßŸÑÿπŸÜÿßÿµÿ± ÿßŸÑŸÖÿ±ŸÅŸÇÿ© ÿØÿßÿÆŸÑ ÿßŸÑÿπŸÑÿ®ÿ© ÿ•ŸÜ Ÿàÿ¨ÿØÿ™ ŸÖÿ´ŸÑ: ÿßŸÑÿ¨Ÿáÿßÿ≤ÿå ÿßŸÑŸÉÿßÿ®ŸÑÿå ÿßŸÑÿØŸÑŸäŸÑÿå ÿßŸÑŸÇÿ∑ÿπ ÿßŸÑÿ•ÿ∂ÿßŸÅŸäÿ©...]  

---

üíù **ŸÖŸÜÿßÿ≥ÿ®ÿ© ŸÑŸÄ:**
[ÿßŸÉÿ™ÿ® ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖÿßÿ™ ÿ£Ÿà ÿßŸÑŸÖŸÜÿßÿ≥ÿ®ÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ŸÜÿßÿ≥ÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸÖÿ´ŸÑ: ŸáÿØŸäÿ©ÿå ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÖŸÜÿ≤ŸÑŸäÿå ÿ±ÿ≠ŸÑÿ©ÿå ŸÖŸÜÿßÿ≥ÿ®ÿ© ÿÆÿßÿµÿ©ÿå ÿØŸäŸÉŸàÿ±ÿå ÿ•ŸÑÿÆ...]

---

üí° **ÿßŸÑÿ™Ÿàÿ¨ŸäŸá ÿßŸÑÿ∞ŸÉŸä:**
- ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäŸãÿß ‚Üí ÿ±ŸÉŸëÿ≤ ÿπŸÑŸâ ÿßŸÑÿ£ÿØÿßÿ°ÿå ÿßŸÑÿ™ŸÇŸÜŸäÿ©ÿå ŸàÿßŸÑŸÉŸÅÿßÿ°ÿ©.  
- ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÖŸÜÿ™ÿ¨ ÿ™ÿ¨ŸÖŸäŸÑŸäŸãÿß ÿ£Ÿà ÿπÿ∑ÿ±ŸäŸãÿß ‚Üí ÿ±ŸÉŸëÿ≤ ÿπŸÑŸâ ÿßŸÑÿ•ÿ≠ÿ≥ÿßÿ≥ÿå ÿßŸÑŸÅÿÆÿßŸÖÿ©ÿå ŸàÿßŸÑÿ±ÿßÿ¶ÿ≠ÿ©.  
- ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸÖŸÜÿ≤ŸÑŸäŸãÿß ‚Üí ÿ±ŸÉŸëÿ≤ ÿπŸÑŸâ ÿßŸÑÿ±ÿßÿ≠ÿ©ÿå ÿßŸÑÿπŸÖŸÑŸäÿ©ÿå ŸàÿßŸÑÿ¨ŸàÿØÿ©.  
- ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÑŸÑÿ£ÿ∑ŸÅÿßŸÑ ‚Üí ÿ±ŸÉŸëÿ≤ ÿπŸÑŸâ ÿßŸÑÿ£ŸÖÿßŸÜÿå ÿßŸÑŸÖÿ™ÿπÿ©ÿå ŸàÿßŸÑÿ±ÿßÿ≠ÿ©.  
- ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖŸÜÿ™ÿ¨Ÿãÿß ŸÅÿßÿÆÿ±Ÿãÿß ÿ£Ÿà ÿ•ŸÉÿ≥ÿ≥Ÿàÿßÿ±Ÿãÿß ‚Üí ÿ±ŸÉŸëÿ≤ ÿπŸÑŸâ ÿßŸÑÿ£ŸÜÿßŸÇÿ©ÿå ÿßŸÑÿ™ÿµŸÖŸäŸÖÿå ŸàÿßŸÑÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑÿØŸÇŸäŸÇÿ©.  

---

üìå **ÿ•ÿÆÿ±ÿßÿ¨ ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©:**
- Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ ÿßŸÑŸÜÿµ ŸÖŸÜÿ≥ŸÇŸãÿß ÿ®ŸÜŸÅÿ≥ ÿßŸÑŸÇÿßŸÑÿ® ÿßŸÑŸÖŸàÿ∂ÿ≠ ÿ£ÿπŸÑÿßŸá.  
- ÿßÿ¨ÿπŸÑ ŸÉŸÑ ŸÖŸÜÿ™ÿ¨ Ÿäÿ®ÿØŸà ŸÅÿ±ŸäÿØŸãÿß ÿ®ÿ∑ÿ±ŸäŸÇÿ™Ÿá ÿßŸÑÿÆÿßÿµÿ©ÿå ÿØŸàŸÜ ŸÜÿ≥ÿÆ ÿßŸÑÿµŸäÿßÿ∫ÿ© ŸÖŸÜ ŸÖŸÜÿ™ÿ¨ ÿ¢ÿÆÿ±.  
- ŸÑÿß ÿ™ŸÉÿ™ÿ® ÿ£Ÿä ÿ¥Ÿäÿ° ÿÆÿßÿ±ÿ¨ ÿßŸÑŸàÿµŸÅ (ŸÑÿß SEO ÿ£Ÿà Ÿàÿ≥ŸàŸÖ ÿ£Ÿà ÿ±Ÿàÿßÿ®ÿ∑).  
- ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ© Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸÉŸàŸÜ ÿ¨ÿßŸáÿ≤ÿ© ŸÑŸÑŸÜÿ≥ÿÆ ÿßŸÑŸÖÿ®ÿßÿ¥ÿ± ÿ•ŸÑŸâ ŸàÿµŸÅ ÿßŸÑŸÖŸÜÿ™ÿ¨ ŸÅŸä Shopify.










`;
  }
  
  const result = await makeOpenAIRequest(prompt);
  return result.replace(/"/g, ''); // Clean up quotes
}

// **NEW & IMPROVED**: Robust function to translate options and their values reliably
async function translateProductOptions(product) {
    if (!product.options || product.options.length === 0 || !product.variants) {
        return { variants: product.variants, options: product.options };
    }

    const translationMap = new Map();

    // 1. Translate Option Names (e.g., Color, Size)
    const optionNames = product.options.map(opt => opt.name);
    const namesPrompt = `Translate only the following option names, separated by '||':\n${optionNames.join(' || ')}`;
    const translatedNamesStr = await makeOpenAIRequest(namesPrompt, 150);
    const translatedNames = translatedNamesStr.split('||').map(n => n.trim());
    
    // 2. Translate Option Values for each option separately
    for (let i = 0; i < optionNames.length; i++) {
        const optionName = optionNames[i];
        // Get unique values for this specific option (e.g., for "Color", get "Red", "Blue")
        const uniqueValues = [...new Set(product.variants.map(v => v[`option${i + 1}`]).filter(Boolean))];
        
        if (uniqueValues.length > 0) {
            const valuesPrompt = `Translate only the following values for "${optionName}", separated by '||':\n${uniqueValues.join(' || ')}`;
            const translatedValuesStr = await makeOpenAIRequest(valuesPrompt, 400);
            const translatedValues = translatedValuesStr.split('||').map(v => v.trim());
            
            uniqueValues.forEach((val, index) => {
                if (translatedValues[index]) {
                    translationMap.set(val, translatedValues[index]);
                }
            });
        }
    }

    // 3. Rebuild product options and variants with translated values
    const newOptions = product.options.map((opt, i) => ({
        ...opt,
        name: translatedNames[i] || opt.name,
    }));

    const newVariants = product.variants.map(variant => ({
        ...variant,
        option1: translationMap.get(variant.option1) || variant.option1,
        option2: translationMap.get(variant.option2) || variant.option2,
        option3: translationMap.get(variant.option3) || variant.option3,
    }));

    return { variants: newVariants, options: newOptions };
}


// =============== DATA PROCESSING HELPERS ===============
function generateHandle(englishTitle) {
  return englishTitle.toLowerCase().replace(/[^\w\s-]/g, "").trim().replace(/\s+/g, "-").slice(0, 70);
}

function generateSEO(title, description) {
  const cleanDescription = description.replace(/<[^>]+>/g, " ").replace(/\s\s+/g, ' ').trim();
  return { seoTitle: title.slice(0, 70), seoDescription: cleanDescription.slice(0, 160) };
}

// =============== SHOPIFY API HELPER ===============
async function updateShopifyProduct(productId, payload) {
  const url = `${SHOPIFY_STORE_URL}/admin/api/2024-07/products/${productId}.json`;
  try {
    await axios.put(url, { product: payload }, { headers: { "X-Shopify-Access-Token": SHOPIFY_ACCESS_TOKEN } });
    log("SHOPIFY_UPDATE", `Product ${productId} updated successfully.`);
  } catch (err) {
    const errorMessage = err.response ? JSON.stringify(err.response.data) : err.message;
    log("SHOPIFY_ERROR", `‚ùå API call to update product failed: ${errorMessage}`, "‚ùå");
    throw new Error(`Shopify API call failed`);
  }
}

// =============== MAIN PRODUCT PROCESSING LOGIC ===============
async function processProduct(product) {
  const { id, title: enTitle, body_html: enDescription, tags } = product;

  if (tags && tags.includes(PROCESSED_TAG)) {
    log("LOOP_PREVENTION", `üîµ Skipping already processed product ${id}.`, "üîµ");
    return;
  }
  
  log("START_PROCESSING", `üöÄ Starting content generation for: "${enTitle}"`);

  const [newTitle, newDescription, { variants, options }] = await Promise.all([
      createContent(enTitle, null, "title"),
      createContent(enTitle, enDescription, "description"),
      translateProductOptions(product)
  ]);
  log("CONTENT_GENERATION", "Title, description, and variant values created/translated.");

  const newHandle = generateHandle(enTitle);
  const { seoTitle, seoDescription } = generateSEO(newTitle, newDescription);
  
  const deliveryDays = 21;
  // **REMOVED**: Collection and Type from tags
  const updatedTags = `${tags ? tags + ',' : ''}${PROCESSED_TAG}`;
  
  const payload = {
    id,
    title: newTitle,
    body_html: newDescription,
    handle: newHandle,
    tags: updatedTags,
    variants,
    options,
    metafields_global_title_tag: seoTitle,
    metafields_global_description_tag: seoDescription,
    metafields: [{
      key: "delivery_days",
      namespace: "custom",
      value: String(deliveryDays),
      type: "single_line_text_field"
    }]
  };
  
  await updateShopifyProduct(id, payload);

  log("FINISH", `üéØ Product "${newTitle}" (ID: ${id}) processed successfully!`);
}

// =============== API ROUTES (WEBHOOKS) ===============
app.post("/webhook/:type", async (req, res) => {
  log("WEBHOOK_RECEIVED", `Webhook received for product ${req.params.type}.`, "üöÄ");
  res.status(200).send("Webhook received.");
  try {
    await processProduct(req.body);
  } catch (error) {
    log("PROCESSING_ERROR", `‚ùå Error in webhook flow: ${error.message}`, "‚ùå");
  }
});

app.get("/", (_, res) => res.send(`üöÄ eSelect AI Translator & Copywriter v7.0 is running!`));

app.listen(PORT, () => log("SERVER_START", `Server running on port ${PORT}`, "üöÄ"));
